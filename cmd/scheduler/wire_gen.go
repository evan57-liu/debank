// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/coin50etf/coin-market/internal/handler"
	"github.com/coin50etf/coin-market/internal/pkg"
	"github.com/coin50etf/coin-market/internal/pkg/database"
	"github.com/coin50etf/coin-market/internal/pkg/third_party/debank"
	"github.com/coin50etf/coin-market/internal/pkg/third_party/debanksign"
	"github.com/coin50etf/coin-market/internal/repo"
	"github.com/coin50etf/coin-market/internal/scheduler"
	"github.com/coin50etf/coin-market/internal/scheduler/jobs"
	"github.com/coin50etf/coin-market/internal/service"
	"github.com/google/wire"
	"log"
)

import (
	_ "ariga.io/atlas-provider-gorm/gormschema"
)

// Injectors from app.go:

// initScheduler 使用 wire 进行依赖注入
func initScheduler() (*scheduler.Scheduler, func(), error) {
	postgresDB, err := database.NewPostgresDB()
	if err != nil {
		return nil, nil, err
	}
	protocolPositionRepository := repo.NewProtocolPositionRepository(postgresDB)
	userTokenRepository := repo.NewUserTokenRepository(postgresDB)
	walletAddressRepository := repo.NewWalletAddressRepository(postgresDB)
	walletAssetSnapshotRepository := repo.NewWalletAssetSnapshotRepository(postgresDB)
	client := debank.NewClient()
	protocolService := service.NewProtocolService(protocolPositionRepository, userTokenRepository, walletAddressRepository, walletAssetSnapshotRepository, client, postgresDB)
	protocolJob := jobs.NewProtocolJob(protocolService)
	transactionRepository := repo.NewTransactionRepository(postgresDB)
	debanksignClient := debanksign.NewClient()
	transactionService := service.NewTransactionService(protocolPositionRepository, walletAddressRepository, transactionRepository, client, debanksignClient, postgresDB)
	transactionJob := jobs.NewTransactionJob(transactionService)
	schedulerScheduler := scheduler.NewScheduler(protocolJob, transactionJob)
	return schedulerScheduler, func() {
	}, nil
}

// app.go:

var providerSet = wire.NewSet(pkg.ProviderSet, repo.ProviderSet, service.ProviderSet, handler.ProviderSet, wire.NewSet(registerCleanup), scheduler.ProviderSet)

func registerCleanup(postgresDB *database.PostgresDB) func() {
	return func() {
		_ = postgresDB.Close()
		log.Println("Closed mysql, timescale and redis connections")
	}
}
