// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/coin50etf/coin-market/internal"
	"github.com/coin50etf/coin-market/internal/handler"
	"github.com/coin50etf/coin-market/internal/pkg"
	"github.com/coin50etf/coin-market/internal/pkg/database"
	"github.com/coin50etf/coin-market/internal/pkg/third_party/debank"
	"github.com/coin50etf/coin-market/internal/repo"
	"github.com/coin50etf/coin-market/internal/service"
	"github.com/gin-gonic/gin"
	"github.com/google/wire"
)

import (
	_ "ariga.io/atlas-provider-gorm/gormschema"
)

// Injectors from app.go:

// initApp 使用 wire 进行依赖注入
func initApp() (*gin.Engine, func(), error) {
	healthHandler := handler.NewHealthHandler()
	postgresDB, err := database.NewPostgresDB()
	if err != nil {
		return nil, nil, err
	}
	protocolMappingRepository := repo.NewProtocolMappingRepository(postgresDB)
	protocolPositionRepository := repo.NewProtocolPositionRepository(postgresDB)
	userTokenRepository := repo.NewUserTokenRepository(postgresDB)
	walletAddressRepository := repo.NewWalletAddressRepository(postgresDB)
	client := debank.NewClient()
	protocolService := service.NewProtocolService(protocolMappingRepository, protocolPositionRepository, userTokenRepository, walletAddressRepository, client, postgresDB)
	protocolHandler := handler.NewProtocolHandler(protocolService)
	engine := internal.RegisterRoutes(healthHandler, protocolHandler)
	return engine, func() {
	}, nil
}

// app.go:

var providerSet = wire.NewSet(pkg.ProviderSet, repo.ProviderSet, service.ProviderSet, handler.ProviderSet, wire.NewSet(registerCleanup), internal.RegisterRoutes)

func registerCleanup(postgresDB *database.PostgresDB) func() {
	return func() {
		_ = postgresDB.Close()
	}
}
